# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TrackingStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, detail: str=None):  # noqa: E501
        """TrackingStatus - a model defined in Swagger

        :param id: The id of this TrackingStatus.  # noqa: E501
        :type id: int
        :param detail: The detail of this TrackingStatus.  # noqa: E501
        :type detail: str
        """
        self.swagger_types = {
            'id': int,
            'detail': str
        }

        self.attribute_map = {
            'id': 'id',
            'detail': 'detail'
        }

        self._id = id
        self._detail = detail

    @classmethod
    def from_dict(cls, dikt) -> 'TrackingStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The trackingStatus of this TrackingStatus.  # noqa: E501
        :rtype: TrackingStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TrackingStatus.


        :return: The id of this TrackingStatus.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TrackingStatus.


        :param id: The id of this TrackingStatus.
        :type id: int
        """
        if id is not None and id > 15:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `15`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def detail(self) -> str:
        """Gets the detail of this TrackingStatus.


        :return: The detail of this TrackingStatus.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail: str):
        """Sets the detail of this TrackingStatus.


        :param detail: The detail of this TrackingStatus.
        :type detail: str
        """
        allowed_values = ["Undefined", "Tracking", "Optical Good", "Optical Acceptable", "Optical Unreliable", "Optical Unstable", "Optical Lost", "Lost Too Few Stars", "LOC Searching", "Busy Or Waiting", "Busy Loading Map", "No Map Loaded", "Test Signal", "Mech Enc Only", "IO Error", "Internal Error"]  # noqa: E501
        if detail not in allowed_values:
            raise ValueError(
                "Invalid value for `detail` ({0}), must be one of {1}"
                .format(detail, allowed_values)
            )

        self._detail = detail
